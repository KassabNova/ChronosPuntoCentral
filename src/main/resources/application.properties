# Obviously not a best practice, but it's just a quick test. I would use spring cloud config
spring.datasource.url= jdbc:postgresql://localhost:5432/reservations
spring.datasource.username= myuser
spring.datasource.password= secret
spring.datasource.initialize=true

spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation= true
spring.jpa.properties.hibernate.dialect= org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.hbm2ddl.create_namespaces=true

spring.jpa.properties.javax.persistence.schema-generation.scripts.action=update
spring.jpa.properties.javax.persistence.schema-generation.scripts.create-target=create.sql
spring.jpa.properties.javax.persistence.schema-generation.scripts.create-source=metadata
# Hibernate ddl auto (create, create-drop, validate, update)
spring.jpa.hibernate.ddl-auto=update
spring.jpa.generate-ddl=true

#spring.jpa.show-sql=true
#spring.session.store-type=none

###HTTPS Stuff
# The format used for the keystore. for JKS, set it as JKS
server.ssl.key-store-type=PKCS12
# The path to the keystore containing the certificate
server.ssl.key-store=classpath:keystore/kosmos.p12
# The password used to generate the certificate
server.ssl.key-store-password=kosmos
# The alias mapped to the certificate
server.ssl.key-alias=kosmos
# Run Spring Boot on HTTPS only
server.port=8443